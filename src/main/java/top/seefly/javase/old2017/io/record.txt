File:文件和目录路径的抽象表示形式
 * 构造方法
 *	File(String pathname)  根据路径名得到一个Fild对象
 * 	File(String parent, String child) 根据一个文件夹路径，和文件夹内的文件或文件夹得到一个Fil对象
 * 	File(File parent, String child) 根据Fil对象和此对象的子文件或目录得到Fil对象
 *	新建File对象并不会在硬盘上创建对应的文件或文件夹，它只是文件或文件夹路径的抽象表示形式，而一个File对象则是对其的封装
 *	
 	file.mkdir() 由file指定的地址创建文件夹，boolean返回值
 *	file.mkdirs() 若父目录不存在，则新建之后再在里面创建
 *	file.createNewFile() 创建文件，若文件所属目录不存在则抛异常，成功返回true
 	file.delete() 删除文件或文件夹，文件夹非空
 *	file.getAbsolutePath()得到绝对路径
 	file.getPath() 得到相对路径
 *	file.list() 返回该文件夹内所有File对象的Name
 *	file.fileList() 返回该文件夹内所有File对象
 *
 *	注意！！！
 		FileOutputStream(File,boolean append)向文件中写数据，如果不设置append那么表示覆盖源文件
 		以及后来基于该类的各种类都会如此。
 		除此之外，append还能再FileWriter中设置
 		
 		针对字符的处理，我们一般都使用FileWriter()
 								5中writer(int\char[]\String)
 									任何写都放进参数
 							FileReader()
 								3种:int\char[] = read()
 									任何读都没有返回值是String的
 *	
 *
 * * IO流的分类
 * 	流向：
 * 		输入流：流向程序
 * 		输出流：从程序流出
 * 	数据类型：
 * 		字节流(底层流)
 * 			字节输入流  	超类(abstract) ： InputStream
 * 										----FileInputStream(File f\String filePath)
 											{
 												
 												read()读取一个字节，返回值表示
 												read(byte[] bt)读取一个byte数组
 												read(byte[],starIndex,len)指定位置即长度读取
 											}
 										----FilterInputStream(InputStream input)
 												----BufferedInputStream(InputStream input)提供缓冲池，提高效率
 * 			字节输出流 	超类 (abstract)： OutputStream
 * 										----FileOutputStream(File f\String filePath)
 											{
 												writer(int byte) 写入一个字节
 												writer(byte[] bt) 写入一个字节数组
 												writer(byte[],starIndex,len)指定长度，以及起始位写入
 											}
 										----FilterOutputStream(OutputStream output)
 												----BufferedOutputStream(OutputStream output) 提供缓冲池，提高效率
 * 
 * 		字符流(转换流)							
 * 			字符输入流  超类(abstract) ：Reader
 * 										----InputStreamReader(InputStream in/InputStream in,String codingName)
 											{
 												read()
 												read(char[])
 												read(char[],starIndex,len)
 											}
 												----FileReader(File file/String FilePath)
 												{
 													这个类是替代它的父类的，父类名字太长了，使用方法都一样
 													只是这个类无法指定编码表
 												}
 * 			字符输出流  超类(abstract) ：Writer
 * 										----OutputStreamWriter(OutputStream out)
 											{
 												writer(int char)
 												writer(char[])
 												writer(char[],starIndex,len)
 												writer(String)
 												writer(String,starIndex,len)
 											}
 												----FileWriter(File file/String FilePath)
 												{
 													这个类是替代它的父类的，父类名字太长了，使用方法都一样
 													只是这个类无法指定编码表
 												}
 * 
 * 一般在讨论IO的时候，没有指明按那种方式分类，默认为按数据类型分类
 * 注意：一个FileInputStream对象从文件中读数据，如果读完之后在对其调用read，那么将什么都读不出来，因为它的指针已经移动到末尾。
 *
 *